{
  "type": "SingleSwap",
  "triggers": [
    {
      "data_point": "events",
      "function": {
        "name": "checkIfSingleSwap",
        "args": [
          {
            "name": "eventsArray",
            "path": "items"
          }
        ],
        "value": "const eventsArray = args.eventsArray; if (eventsArray.length == 0) {      return false;    }    let swapEvents = [];    let index = 0;    for (let eventLog of eventsArray) {      const methodCall = eventLog && eventLog.decoded && eventLog.decoded.method_call;      const method = methodCall && methodCall.split('(')[0];      if ((method || eventLog.temp_function_name) === 'Swap') {        swapEvents.push({          index: index,          eventLog: eventLog,        });      }      index++;    }    if (swapEvents.length != 1 ) {      return false;    }    const swapEvent = swapEvents[0];    let transferEventBeforeSwap = 0;    for (let i = swapEvent.index - 1; i >= 0; i--) {      const eventLog = eventsArray[i];      const methodCall = eventLog && eventLog.decoded && eventLog.decoded.method_call;      const method = methodCall && methodCall.split('(')[0];      if ((method || eventLog.temp_function_name) === 'Transfer') {        transferEventBeforeSwap++;      }    }    if (transferEventBeforeSwap < 2) {      return false;    }    return true;"
      }
    }
  ],
  "preprocessed_variables": {
    "function": {
      "name": "getSwapDetails",
      "args": [
        {
          "name": "eventsArray",
          "data_point": "events",
          "path": "items"
        },
        {
          "name": "tokenTransfers",
          "data_point": "data",
          "path": "token_transfers"
        },
        {
          "name": "BigNumber",
          "data_point": "library"
        }
      ],
      "value": "const BigNumber = args.BigNumber; const eventsArray = args.eventsArray;    const tokenTransfers = args.tokenTransfers;    let convertToDecimal = (value, decimal) =>      new BigNumber(value)      .dividedBy(new BigNumber(10).pow(decimal))      .toString();    let swapEvent = null;    for (let eventLog of eventsArray) {      const methodCall = eventLog && eventLog.decoded && eventLog.decoded.method_call;      const method = methodCall && methodCall.split('(')[0];      if ((method || eventLog.temp_function_name) === 'Swap') {        swapEvent = eventLog;        break;      }    }    const swapContractAddress = swapEvent.address.hash.toLowerCase();    let incomingAmount = new BigNumber(0);    let outgoingAmount = new BigNumber(0);    let incomingTokenAddress = null;    let outgoingTokenAddress = null;    for (let tokenTransfer of tokenTransfers) {      const tokenTransferToAddress = tokenTransfer.to.hash.toLowerCase();      const tokenTransferFromAddress = tokenTransfer.from.hash.toLowerCase();      if (tokenTransferToAddress == swapContractAddress) {        const decimal = tokenTransfer.total.decimals;        const formattedOutgoingAmount = convertToDecimal(          tokenTransfer.total.value,          decimal        );        incomingAmount = incomingAmount.plus(formattedOutgoingAmount);        incomingTokenAddress = tokenTransfer.token.address;      }      if (tokenTransferFromAddress == swapContractAddress) {        const decimal = tokenTransfer.total.decimals;        const formattedOutgoingAmount = convertToDecimal(          tokenTransfer.total.value,          decimal        );        outgoingAmount = outgoingAmount.plus(formattedOutgoingAmount);        outgoingTokenAddress = tokenTransfer.token.address;      }    }    if (      incomingTokenAddress &&      incomingTokenAddress.toUpperCase() ==        '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'.toUpperCase()    ) {      incomingTokenAddress = 'Ether';    }    if (      outgoingTokenAddress &&      outgoingTokenAddress.toUpperCase() ==        '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'.toUpperCase()    ) {      outgoingTokenAddress = 'Ether';    }    let convertToNumberWithCommas = (value) => {      let parts = value.split('.');      parts[0] = Number(parts[0]).toLocaleString('en-US');      return parts.join('.');    };    return {      incomingAmount: convertToNumberWithCommas(incomingAmount.toString()),      outgoingAmount: convertToNumberWithCommas(outgoingAmount.toString()),      incomingTokenAddress: incomingTokenAddress,      outgoingTokenAddress: outgoingTokenAddress    }"
    }
  },
  "variables": {
    "incomingAmount": {
      "data_point": "preprocessed_variables",
      "path": "incomingAmount"
    },
    "incomingTokenAddress": {
      "data_point": "preprocessed_variables",
      "path": "incomingTokenAddress"
    },
    "outgoingAmount": {
      "data_point": "preprocessed_variables",
      "path": "outgoingAmount"
    },
    "outgoingTokenAddress": {
      "data_point": "preprocessed_variables",
      "path": "outgoingTokenAddress"
    }
  },
  "message": "Swap {incomingAmount} {incomingTokenAddress} For {outgoingAmount} {outgoingTokenAddress}"
}